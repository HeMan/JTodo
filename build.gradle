import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.5'
	id 'io.spring.dependency-management' version '1.1.5'
	id 'org.springdoc.openapi-gradle-plugin' version '1.8.0'
	id 'com.bmuschko.docker-remote-api' version '9.4.0'
}

group = 'se.cygni'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

openApi {
	apiDocsUrl = "http://localhost:8080/v1/api-docs"
	outputDir = file("$projectDir")
	outputFileName = "SwaggerDoc.json"
}

repositories {
	mavenCentral()
}

apply plugin: 'com.bmuschko.docker-remote-api'

ext {
	set('testcontainers.version', "1.19.7")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.postgresql:postgresql'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.testcontainers:postgresql'
	testImplementation 'io.rest-assured:rest-assured'
	testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

}

tasks.named('test') {
	useJUnitPlatform()
}


docker {
	url = 'unix:///var/run/docker.sock'
	registryCredentials {
		url = 'https://ghcr.io'
		if (project.hasProperty('dockerRegistryUser') && project.hasProperty('dockerRegistryPwd')) {
			username = project.property('dockerRegistryUser') as String
			password = project.property('dockerRegistryPwd') as String
		}
	}
}

tasks.register('buildImage', DockerBuildImage) {
	dependsOn build
	group = "Docker"
	description = "Build docker image"
	inputDir = file(".")
	images = ["ghcr.io/heman/jtodo:${version}" as String]
}

tasks.register('pushImage', DockerPushImage) {
	group = "Docker"
	description = "Push docker image to registry"
	dependsOn buildImage
	images = ['ghcr.io/heman/jtodo']
}


tasks.register('createContainer', DockerCreateContainer) {
	group = "Docker"
	description = "Create docker image"
	// dependsOn pushImage
	targetImageId buildImage.getImageId()
	containerName = "JTodo"
	hostConfig.portBindings = ['8080:8080']
	hostConfig.autoRemove = true
}

tasks.register('startContainer', DockerStartContainer) {
	group = "Docker"
	description = "Starts docker container"
	dependsOn createContainer
	targetContainerId "JTodo"
}

tasks.register('stopContainer', DockerStopContainer) {
	description = "Stops running container"
	group = "Docker"
	targetContainerId "JTodo"
}